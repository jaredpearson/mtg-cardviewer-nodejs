<div class="cardlist-header">
    <div class="setselector">
        <span class="setselector-setname">
            {{set.name}} 
        </span>
        <span class="setselector-changebutton"><i class="fa fa-chevron-down"></i></span>
    </div>

    <div class="search">
        <input id="search-input" type="text" />
        <i class="search-button fa fa-search fa-lg"></i>
    </div>
</div>
<div class="cardlist-container">
    <div class="cardlist-tablecontainer">
        <div class="cardlist-table"></div>
    </div>
    <div class="cardlist-cardview"></div>
</div>

<script type="text/javascript">
function CardSelectionPanelView() {
    _.extend(this, Backbone.Events);
    if (this.initialize) {
        this.initialize.apply(this, arguments);
    }
}
CardSelectionPanelView.prototype = {
    initialize: function() {
        this.$input = $('#search-input');
    },
    render: function() {
        var domFragment = document.createDocumentFragment();
        this.$el = $('<div>')
            .attr('id', 'card-selection-panel')
            .css({
                position: 'absolute',
                width: '300px',
                'background-color': 'white',
                border: '1px solid black'
            })
            .addClass('hidden')
            .appendTo(domFragment);
        this._renderResultRows();
        return this;
    }, 
    setData: function(data) {
        this.data = data;
        this._resultRowsRendered = false;
        return this;
    },
    show: function() {
        this._renderResultRows();
        this.positionUnderInput();
        this._registerHideOnClickOutside();
        this.$el.removeClass('hidden');
        return this;
    },
    hide: function() {
        this.$el.addClass('hidden');
        this._unregisterHideOnClickOutside();
        return this;
    },
    positionUnderInput: function() {
        var offset = this.$input.offset();
        this.$el.css({
            position: 'absolute',
            left: this.$input.outerWidth() + offset.left - this.$el.outerWidth(),
            top: this.$input.outerHeight() + offset.top
        });
        return this;
    },
    _renderResultRows: function() {
        if (this._resultRowsRendered) {
            return;
        }
        var that = this;

        this.$el.empty();

        var $rowBuffer = $(document.createDocumentFragment());
        if (this.data) {
            this.data.cards.forEach(function(cardSearchResult) {
                var $resultRow = $('<div>')
                    .addClass('search-results-row')
                    .appendTo($rowBuffer);

                $('<div>')
                    .text(cardSearchResult.card.name)
                    .appendTo($resultRow);

                $('<div>')
                    .css('width', '3em')
                    .text(cardSearchResult.set.code)
                    .appendTo($resultRow);

                $resultRow.on('click', function() {

                    // trigger the view to change
                    that.trigger('selected:setAndCard', {
                        set: cardSearchResult.set,
                        card: cardSearchResult.card
                    });

                    // clear the input 
                    that.$input.val('');

                    // hide the search panel
                    that.hide();
                });
            });
        }

        $('<div>')
            .addClass('search-results')
            .append($rowBuffer)
            .appendTo(this.$el);

        this._resultRowsRendered = true;
        return this;
    },
    _registerHideOnClickOutside: function() {
        // Registers an event on the document that hides the doc on click
        $(document).on('click.card-selection-panel', _.bind(this._handleDocumentClick, this));
    },
    _unregisterHideOnClickOutside: function() {
        $(document).off('.card-selection-panel');
    },
    _handleDocumentClick: function(e) {
        if (!this.$el[0].contains(e.target)) {
            this.hide();
        }
    }
};

var CardListView = Backbone.View.extend({
    initialize: function() {
        this.selected = null;
        this.selectedIndex = -1;
        this.cardViews = [];

        application.keyboard.on('keydown', function(e) {
            var adjustment = 0;
            if (e.which === 40 && this.selectedIndex + 1 <= this.collection.length) {
                adjustment = 1;
            } else if(e.which === 38 && this.selectedIndex - 1 >= 0) {
                adjustment = -1;
            }

            if (adjustment !== 0) {
                e.preventDefault();
                var newIndex = this.selectedIndex + adjustment;
                if (newIndex >= 0 && newIndex < this.cardViews.length) {
                    this.selectByIndex(newIndex);
                }
            }
        }, this);
    },
    render: function() {
        var fragment = document.createDocumentFragment();
        this.cardViews = [];
        this.selectedIndex = -1;
        this.collection.each(function(card, index){
            var childView = new CardListItemView({model: card}).render();
            childView.$el.appendTo(fragment);
            childView.on('selected', function() {
                this._select(childView, index);
            }, this);
            this.cardViews.push(childView);
        }, this);
        this.$el.empty().append(fragment);
        return this;
    },
    selectByIndex: function(index) {
        var cardView = this.cardViews[index];
        this._select(cardView, index);
        cardView.el.scrollIntoView();
    },
    _select: function(cardView, index) {
        // unselect the previous
        if(this.selected) {
            this.selected.unselect();
        }
        cardView.select({trigger: false});

        this.selected = cardView;
        this.selectedIndex = index;
        application.vent.trigger('card:show', {
            card: cardView.model
        });
    },
    setCollection: function(collection) {

        this.collection = collection;
        this.render();

        // scroll the cardView to the first card
        if (this.cardViews.length > 0) {
            this.cardViews[0].el.scrollIntoView();
        }

    }
});
var CardListItemView = Backbone.View.extend({
    className: 'cardrow',
    events: {
        'click': '_onSelected'
    },
    render: function() {
        this.$el.empty();
        $('<div>')
            .text(this.model.get('name'))
            .appendTo(this.$el);

        $('<div>')
            .text(this.model.get('type'))
            .appendTo(this.$el);

        var $manaCostContainer = $('<div>')
            .appendTo(this.$el);

        _.each(this.model.get('manaCost').parts, function(partValue) {
            $('<div>')
                .addClass('manacost-symbol')
                .addClass('manacost-symbol-' + partValue.replace('/', ''))
                .appendTo($manaCostContainer);
        });

        return this;
    },
    unselect: function() {
        this.$el.removeClass('cardrow-selected')
    },
    select: function(options) {
        this.$el.addClass('cardrow-selected');
        if (options === undefined || (options && options.trigger)) {
            this.trigger('selected');
        }
    },
    _onSelected: function(e) {
        e.preventDefault();
        this.select();
    }
});

/**
 * View of the card that is currently selected
 */
var CardView = Backbone.View.extend({
    render: function() {
        this.$el.empty();

        var $cardImageContainer = $('<div>')
            .addClass('cardlist-cardview-imagecontainer')
            .appendTo(this.$el);

        $('<img>')
            .addClass('cardlist-cardview-image')
            .attr({
                src: this.model.get('fullImageUrl'),
                title: this.model.get('name')
            })
            .appendTo($cardImageContainer);
        return this;
    }
});

var SetSelectorListItemView = Backbone.View.extend({
    tagName: 'div',
    className: 'setselector-panel-item',
    events: {
        'click': '_onSelected'
    },
    render: function() {
        var $imgCell = $('<div>')
            .addClass('setselector-panel-item-symbol')
            .appendTo(this.$el);

        $('<div>')
            .addClass('set-symbol')
            .addClass('set-symbol-16')
            .addClass('set-symbol-' + this.model.get('code'))
            .appendTo($imgCell);

        $('<div>')
            .text(this.model.get('name'))
            .appendTo(this.$el);

        return this;
    },
    _onSelected: function(e) {
        e.preventDefault();
        this.trigger('selected')
    }
});

var SetSelectorView = Backbone.View.extend({
    events: {
        'click .setselector-changebutton': 'togglePanelDisplay'
    },
    initialize: function() {
        this.panelVisible = false;
    },
    render: function() {
        this.$panel = $('<div>')
            .addClass('setselector-panel')
            .addClass('hidden')
            .appendTo(this.$el);
        var containerView = this;

        var fragment = document.createDocumentFragment();
        var $setContainer = $('<div>')
            .css({
                'display': 'table',
                'width': '100%'
            })
            .appendTo(fragment);
        this.collection.each(function(set) {
            var listItemView = new SetSelectorListItemView({
                model: set
            }).render();
            listItemView.$el.appendTo($setContainer);
            listItemView.on('selected', function() {
                containerView.setCardSet(set);
            });
        });
        this.$panel.append(fragment);

        return this;
    },
    rerenderPanel: function() {
        if (this.panelVisible === true) {
            this.$panel.removeClass('hidden');
        } else {
            this.$panel.addClass('hidden');
        }
        return this;
    },
    togglePanelDisplay: function(e) {
        e.preventDefault();
        if (this.panelVisible === true) {
            this.panelVisible = false;
        } else {
            this.panelVisible = true;
        }
        this.on('panelVisible:change');
        this.rerenderPanel();
    },
    setCardSet: function(set, trigger) {
        if (trigger === void 0) {
            trigger = true;
        }

        // hide the panel
        this.panelVisible = false;
        this.rerenderPanel();

        // update the selected set
        this.$('.setselector-setname').text(set.get('name'));

        if (trigger) {
            application.vent.trigger('change:set', {
                set: set
            });
        }
    }
});

var SearchView = Backbone.View.extend({
    tagName: 'div',
    className: 'search',
    events: {
        'click .search-button': 'queryAndShowCardSelection'
    },
    initialize: function() {
        this.$('#search-input').on('keydown', _.debounce(_.bind(function(e) {
            this.queryAndShowCardSelection();
        }, this), 200));
    },
    render: function() {
        var that = this;

        this.cardSelectionPanelView = new CardSelectionPanelView().render();

        // keeping the panel in the body so that it can be positioned under the input
        $('body').append(this.cardSelectionPanelView.$el);

        this.cardSelectionPanelView.on('selected:setAndCard', function(results) {
            that.trigger('selected:setAndCard', results);
        });

        return this;
    },
    queryAndShowCardSelection: function() {
        var $input = this.$('#search-input');
        var query = $input.val();

        if (!query || query.length === 0) {
            this.cardSelectionPanelView.hide();
        } else {
            $.ajax({
                url: '/search?q=' + encodeURI(query)
            }).then(_.bind(this.showCardSelectionPanel, this));
        }
    },
    showCardSelectionPanel: function(data) {
        this.cardSelectionPanelView.setData(data);
        this.cardSelectionPanelView.show();
    }
});

function getCardCollectionForSet(setCode, callback) {
    // get the cards that are associated to the set
    $.getJSON('/sets/' + setCode + '/cards.json')
        .done(function(data, success, xhr) {
            if (success && data) {
                var cardCollection = new Backbone.Collection(data);
                callback(cardCollection, data, success, xhr);
            } else {
                callback(undefined, data, success, xhr);
            }
        });
}

window.application = {
    vent: _.extend(Backbone.Events),
    keyboard: _.extend(Backbone.Events)
};

$(document).keydown(function(e) {
    window.application.keyboard.trigger('keydown', e);
});

(function(){
    var cardsArray = {{{cardsAsJson}}},
        cardsCollection = new Backbone.Collection(cardsArray),
        setsArray = {{{setsAsJson}}},
        setsCollection = new Backbone.Collection(setsArray);

    var setSelectorView = new SetSelectorView({
        el: $('.setselector'),
        collection: setsCollection
    }).render();

    var cardListView = new CardListView({
        el: $('.cardlist-table'),
        collection: cardsCollection
    }).render();

    function showCardCollection(cardCollection) {
        cardListView.setCollection(cardCollection);
    }

    var searchView = new SearchView({
        el: $('.search')
    }).render();
    searchView.on('selected:setAndCard', function(results) {
        // find the set with the given code
        var set = setsCollection.findWhere({code: results.set.code});
        if (set) {
            getCardCollectionForSet(set.get('code'), function(cardCollection){
                if (cardCollection) {
                    application.vent.trigger('change:set', {
                        set: set,
                        cardCollection: cardCollection
                    });

                    // attempt to find the selected card from the collection
                    var card = cardCollection.findWhere({number: results.card.number});
                    if (card) {

                        // update the card preview panel
                        application.vent.trigger('card:show', {card: card});

                        // select the card on the card list
                        cardListView.selectByIndex(cardCollection.indexOf(card));
                    }
                }
            });
        }
    });

    application.vent.on('card:show', function(options) {
        var cardView = new CardView({
            el: $('.cardlist-cardview'),
            model: options.card
        }).render();
    });

    // update set collection on set change
    application.vent.on('change:set', function(options) {
        if (!options.cardCollection) {
            getCardCollectionForSet(options.set.get('code'), function(cardCollection) {
                if (cardCollection) {
                    showCardCollection(cardCollection);
                }
            });
        } else {
            showCardCollection(options.cardCollection);
        }
    });

    // update the title on set change
    application.vent.on('change:set', function(options) {
        $('title').text(options.set.get('name') + ' - MTG Card Viewer');
    });

    // update the set selector on set change
    application.vent.on('change:set', function(options) {
        setSelectorView.setCardSet(options.set, false);
    });

    // set the current history state
    history.replaceState({code: '{{set.code}}'}, '', '{{set.code}}');

    // update the page state on set change
    var pushHistory = true;
    application.vent.on('change:set', function(options) {
        if (pushHistory) {
            history.pushState({code: options.set.get('code')}, '', options.set.get('code'));
        }
    });
    $(window).on('popstate', function(event) {
        var stateObj = event.originalEvent.state
        if (!stateObj || !stateObj.code) {
            console.warn('State not found for popstate event');
            return;
        }

        var set = setsCollection.findWhere({code: stateObj.code});
        if (!set) {
            console.warn('Set not found for code: ' + stateObj.code);
            return;
        }

        pushHistory = false;
        application.vent.trigger('change:set', {
            set: set
        });
        pushHistory = true;
    });
})();
</script>